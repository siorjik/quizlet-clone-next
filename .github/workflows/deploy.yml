name: Deploy to hosting

on:
  push:
    branches: main
  pull_request:
    branches: main
  workflow_dispatch:

jobs:
  build-checking:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Get code
        uses: actions/checkout@v3
        
      - name: Yarn install
        run: yarn install
      
      - name: Make .env
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_APP_ENV: ${{ vars.APP_ENV }}
          envkey_API_HOST: ${{ vars.API_HOST }}
          envkey_TRANSLATE_API_URL: ${{ vars.TRANSLATE_API_URL }}
          envkey_TRANSLATE_API_KEY: ${{ vars.TRANSLATE_API_KEY }}
          envkey_TRANSLATE_API_HOST: ${{ vars.TRANSLATE_API_HOST }}
          envkey_DICTIONARY_API_URL: ${{ vars.DICTIONARY_API_URL }}
          envkey_NEXTAUTH_SECRET: ${{ vars.NEXTAUTH_SECRET }}
          file_name: .env.production.local

  docker-hub-deploy:
    needs: build-checking
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ vars.WEB_IMAGE }}:latest

  hosting-deploy:
    needs: docker-hub-deploy
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Deploy to hosting via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOSTING }}
          username: ${{ secrets.HOSTING_USER }}
          password: ${{ secrets.HOSTING_PASS }}
          script: |
            cd ~/projects/quizlet-clone-next
            sudo docker-compose stop
            sudo docker-compose pull
            sudo docker-compose --env-file .env.production.local up -d
            sudo docker image prune -f